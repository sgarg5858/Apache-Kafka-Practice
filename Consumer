package com.github.elasticsearch.tutorial3;

import java.io.IOException;
import java.time.Duration;
import java.util.Arrays;
import java.util.Properties;

import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;
import org.elasticsearch.action.bulk.BulkRequest;
import org.elasticsearch.action.bulk.BulkResponse;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestClientBuilder;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.mapper.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.JsonParser;

public class ConsumerElasticSearchWithManualCommit {
	
	public static RestHighLevelClient createClient(){

        //////////////////////////
        /////////// IF YOU USE LOCAL ELASTICSEARCH
        //////////////////////////

        //  String hostname = "localhost";
        //  RestClientBuilder builder = RestClient.builder(new HttpHost(hostname,9200,"http"));


        //////////////////////////
        /////////// IF YOU USE BONSAI / HOSTED ELASTICSEARCH
        //////////////////////////

        // replace with your own credentials
        String hostname = "elastic-search-3586009006.ap-southeast-2.bonsaisearch.net"; // localhost or bonsai url
        String username = "2957e7ubhe"; // needed only for bonsai
        String password = "kablo77s49"; // needed only for bonsai

        // credentials provider help supply username and password
        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
        credentialsProvider.setCredentials(AuthScope.ANY,
                new UsernamePasswordCredentials(username, password));

        RestClientBuilder builder = RestClient.builder(
                new HttpHost(hostname, 443, "https"))
                .setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {
                    public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {
                        return httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
                    }
                });
        RestHighLevelClient client = new RestHighLevelClient(builder);
        return client;
	}
	public static KafkaConsumer<String,String> createConsumer(String topic)
	{
		String bootstrapServers="127.0.0.1:9092";
		String groupId="kafka_elastic_search";
		
		//create Consumer Properties
		Properties properties=new Properties();
		properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
		properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, groupId);
		properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,"earliest");
		properties.setProperty(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,"false");
		properties.setProperty(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, "10");
		
		//create Consumer
		KafkaConsumer<String, String>consumer=new KafkaConsumer<String, String>(properties);
		
		//subscribe
		consumer.subscribe(Arrays.asList(topic));
		
		return consumer; 
	}
	private static JsonParser jsonParser=new JsonParser();
	public static String extractIdfromTweet(String tweet)
	{
		return jsonParser.parse(tweet)
				.getAsJsonObject()
				.get("id_str")
				.getAsString();
				
	}
	public static void main(String[] args) throws IOException {
		
		Logger logger=LoggerFactory.getLogger(ConsumerElasticSearch.class.getName());
		RestHighLevelClient client=createClient();
		
		
		
		String topic="twitter_data";
		KafkaConsumer<String, String>consumer=createConsumer(topic);
		while(true)
		{
			ConsumerRecords<String,String>records=consumer.poll(Duration.ofMillis(10));
			logger.info("Received: "+records.count()+ " records");
			
			BulkRequest bulkRequest=new BulkRequest();
			for(ConsumerRecord<String,String>record : records)
			{
				String jsonString=record.value(); 
				//Kafka Generic Strategy
				String Id=record.topic()+"_"+record.partition()+"_"+record.offset();
				//Tweet specific id
				String ID=extractIdfromTweet(record.value());
				//this is where we insert data into elastic search
				IndexRequest indexRequest=new IndexRequest("twitter", "tweets",Id).source(jsonString,XContentType.JSON);
				
				bulkRequest.add(indexRequest);
//				IndexResponse indexResponse=client.index(indexRequest, RequestOptions.DEFAULT);
//				String id=indexResponse.getId();
//				logger.info(id);
//				try {
//					Thread.sleep(10);
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//				
			}
			if(records.count()>0)
			{
				BulkResponse bulkResponse=client.bulk(bulkRequest, RequestOptions.DEFAULT);
				logger.info("About to commit consumer offsets");
				consumer.commitSync();
				logger.info("Offsets Committed");
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
	//	client.close();
		
	}

}
